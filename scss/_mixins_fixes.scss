/*=========================================
=            Fixes                       =
=========================================*/

span, select, article, section, header, aside, footer, textarea, input, h1, h2, h3, h4, h5, h6, a, div, ul, li {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}
iframe[name="google_conversion_frame"] {
    height: 0!important;
    overflow: hidden;
    display: block;
}
pre {
    z-index: 2;
}
img[data-pin-nopin="true"] {
    display: none;
}

/*=================================
=            susy grid            =
=================================*/

// Span Mixin
// ----------
// Settings
$susy: ( 'columns': susy-repeat(12), 'svg-grid-colors': hsla(180, 50%, 50%, 0.25), );
// overall container mixin
@mixin container( $width: all, $config: $susy, $debug: false) {
    $config: susy-settings($config);
    $container-spread: map-get($config, 'container-spread');
    $width: span($width $container-spread of $container-spread, $config);
    @include clearfix;
    margin: 0 auto;
    max-width: $width or 100%;
    @if $debug {
        background: susy-svg-grid($grid: $config) no-repeat scroll;
    }
}
@mixin span( $span, $config: $susy) {
    width: span($span, $config);
    @if index($span, 'last') {
        float: right; // margin-right: 0; if you want an explicit reset
        margin-right: 0;
    }
    @else {
        float: left;
        margin-right: gutter();
    }
}
@mixin gallery( $span, $config: ()) {
    $grid: susy-compile($span, $config);
    $span: map-get($grid, 'span');
    $column-count: length(map-get($grid, 'columns'));
    $count: floor($column-count / $span);
    $spread: map-get($grid, 'spread') + 2;
    $container-spread: map-get($grid, 'container-spread') + 2;
    $extra: ($container-spread - $spread) * 0.5;
    $extra-push: su-call('su-gutter', $grid) * $extra;
    float: left;
    margin-right: -100%;
    @for $n from 1 through ($count) {
        $nth: unquote('#{$count}n + #{$n}');
        $location: $span * ($n - 1) + 1;
        &:nth-child(#{$nth}) {
            $width: susy-compile($span at $location, $grid);
            width: su-call('su-span', $width);
            @if ($location > 1) {
                $wide: susy-compile('first' $location - 1 'wide', $grid);
                clear: none;
                margin-left: su-call('su-span', $wide) + $extra-push;
            }
            @else {
                clear: both;
                margin-left: if($extra-push > 0, $extra-push, 0);
            }
        }
    }
}

/*==============================
=            mixins            =
==============================*/

// clearfix
@mixin clearfix {
    clear: both;
    &::after {
        clear: both;
        content: ' ';
        display: table;
    }
}
@mixin placeholder {
    &::-webkit-input-placeholder {
        @content;
    }
    &:-moz-placeholder {
        @content;
    }
    &::-moz-placeholder {
        @content
    }
    &:-ms-input-placeholder {
        @content;
    }
}
@mixin gal2 {
    @include gallery (6);
    @include breakpoint(max-width 650px) {
        @include gallery (1);
        margin-bottom: 10px;
        @include gallery (12);
    }
}
@mixin gal3 {
    @include gallery (4);
    margin-bottom: 20px;
    @include breakpoint(max-width 650px) {
        @include gallery (6);
    }
}
@mixin col2 {
    @include span ( 6 of 12);
    &:last-child {
        @include span ( 6 of 12 last);
    }
}
@mixin col3 {
    @include span ( 4 of 12);
    &:last-child {
        @include span ( 4 of 12 last);
        @include breakpoint($tablet_grande) {
            width: 100%;
            clear: both;
            margin-bottom: 30px;
        }
    }
    @include breakpoint($tablet_grande) {
        width: 100%;
        clear: both;
        margin-bottom: 30px;
    }
}
@mixin col4 {
    @include span ( 3 of 12);
    @include breakpoint($tablet_grande) {
        @include span (6 of 12);
        margin-bottom: 10px;
    }
    @include breakpoint($mobile_grande) {
        width: 100%;
        clear: both;
        margin-bottom: 30px;
    }
    &:last-child {
        @include span ( 3 of 12 last);
        @include breakpoint($tablet_grande) {
            @include span (6 of 12 last);
            margin-bottom: 10px;
        }
        @include breakpoint($mobile_grande) {
            width: 100%;
            clear: both;
            margin-bottom: 30px;
        }
    }
    &:nth-child(2) {
        @include breakpoint($tablet_grande) {
            @include span (6 of 12 last);
        }
        @include breakpoint($mobile_grande) {
            width: 100%;
            clear: both;
            margin-bottom: 30px;
        }
    }
}
